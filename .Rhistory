ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
coord_flip() +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "Percent of States Predicted Correctly")
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "Percent of States Predicted Correctly", x = "") +
coord_flip() +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "Percent of States Predicted Correctly", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(correct_perc)) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "Percent of States Predicted Correctly", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc)) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
element_text(x = 2004, y = 0.8, label = "here") +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
geom_text(x = 2004, y = 0.8, label = "here") +
theme_clean()
?geom_text
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
geom_text() +
annotate("text", label = "more text", x = 2004, y = 0.84, size = 5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "more text", x = 2004, y = 0.84, size = 5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "more text", y = 0.84, size = 5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "more text", x = 3, y = 0.84, size = 5) +
theme_clean()
mean(pred_df$correct_perc)
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate(label = "Average Accuracy (0.8)", x = 3.5, y = 0.84, size = 4.5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average Accuracy (0.8)", x = 3.5, y = 0.84, size = 4.5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average/n Accuracy (0.8)", x = 3.5, y = 0.84, size = 4.5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.84, size = 4.5) +
theme_clean()
pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.9, size = 4.5) +
theme_clean()
out_samp_graph <- pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.9, size = 4.5) +
theme_clean()
out_samp_graph <- pred_df %>%
ggplot(aes(x = as.factor(year), y = correct_perc)) +
geom_bar(stat = "identity", fill = "steelblue2") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.9, size = 4.5) +
theme_clean()
ggsave(path = "images", filename = "final_outsamp_graph.png", height = 6, width = 10)
output_2 <- tibble()
for(y in unique(mod_dat$year)) {
year_inc <- subset(mod_dat, subset = year == y)
for(s in unique(mod_dat$state)) {
year_state_inc <- subset(year_inc, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = y, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
}
output_2
cor_96 <- mean(output_2$winner, na.rm = T)
cor_96
output_2 <- tibble()
for(y in unique(mod_dat$year)) {
year_inc <- subset(mod_dat, subset = year == y)
for(s in unique(mod_dat$state)) {
year_state_inc <- subset(year_inc, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = y, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
}
cor_96_in_samp <- mean(output_2$winner, na.rm = T)
cor_96_in_samp
output_2 <- tibble()
for(y in unique(mod_dat$year)) {
year_inc <- subset(mod_dat, subset = year == y)
for(s in unique(mod_dat$state)) {
year_state_inc <- subset(year_inc, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat %>%
filter(year != y & state != s)
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = y, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
}
cor_96 <- mean(output_2$winner, na.rm = T)
cor_96
cor_96_in_samp
mod_dat_2 <- na.omit(mod_dat) %>%
filter(year == 2000)
output_2 <- tibble()
for(s in unique(mod_dat_2$state)) {
year_state_inc <- subset(mod_dat_2, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = 2000, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
cor_00_in_samp <- mean(output_2$winner, na.rm = T)
cor_00
cor_00_in_samp
mod_dat_3 <- na.omit(mod_dat) %>%
filter(year == 2004)
output_2 <- tibble()
for(s in unique(mod_dat_3$state)) {
year_state_inc <- subset(mod_dat_3, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = 2004, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
cor_04_in_samp <- mean(output_2$winner, na.rm = T)
mod_dat_4 <- na.omit(mod_dat) %>%
filter(year == 2008)
output_2 <- tibble()
for(s in unique(mod_dat_4$state)) {
year_state_inc <- subset(mod_dat_4, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = 2008, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
cor_08_in_samp <- mean(output_2$winner, na.rm = T)
mod_dat_5 <- na.omit(mod_dat) %>%
filter(year == 2012)
output_2 <- tibble()
for(s in unique(mod_dat_5$state)) {
year_state_inc <- subset(mod_dat_5, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = 2012, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
cor_12_in_samp <- mean(output_2$winner, na.rm = T)
mod_dat_6 <- na.omit(mod_dat) %>%
filter(year == 2016)
output_2 <- tibble()
for(s in unique(mod_dat_6$state)) {
year_state_inc <- subset(mod_dat_6, subset = state == s)
true_inc <- year_state_inc %>%
pull(inc_vote)
glm_mod_dat <- mod_dat
out_samp_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, glm_mod_dat,
family = binomial)
pred_inc_vote <- predict(out_samp_mod, newdata = year_state_inc, type = "response")[[1]]
sim_inc_votes <- rbinom(n = 1, size = year_state_inc$voters, prob = pred_inc_vote)
inc_vs <- sim_inc_votes/year_state_inc$voters
tib <- tibble(state = s, year = 2016, winner = ifelse(inc_vs > 0.5 & (true_inc / year_state_inc$voters) > 0.5, 1,
ifelse(inc_vs < 0.5 & (true_inc / year_state_inc$voters) < 0.5, 1, 0)))
output_2 <- output_2 %>% bind_rows(tib)
}
cor_16_in_samp <- mean(output_2$winner, na.rm = T)
pred_df_in_samp <- data.frame(year = c(1996, 2000, 2004, 2008, 2012, 2016), correct_perc = c(cor_96_in_samp, cor_00_in_samp, cor_04_in_samp,
cor_08_in_samp, cor_12_in_samp, cor_16_in_samp))
pred_df_in_samp
pred_df_both <- pred_df %>%
bind_rows(pred_df_in_samp)
pred_df_both
pred_df_in_samp <- data.frame(type = "in samp", year = c(1996, 2000, 2004, 2008, 2012, 2016), correct_perc = c(cor_96_in_samp, cor_00_in_samp, cor_04_in_samp,
cor_08_in_samp, cor_12_in_samp, cor_16_in_samp))
pred_df_in_samp
pred_df_in_samp <- data.frame(type = "In Sample", year = c(1996, 2000, 2004, 2008, 2012, 2016), correct_perc = c(cor_96_in_samp, cor_00_in_samp, cor_04_in_samp,
cor_08_in_samp, cor_12_in_samp, cor_16_in_samp))
pred_df <- data.frame(type = "Out of Sample", year = c(1996, 2000, 2004, 2008, 2012, 2016), correct_perc = c(cor_96, cor_00, cor_04, cor_08, cor_12, cor_16))
pred_df_both <- pred_df %>%
bind_rows(pred_df_in_samp)
pred_df_both
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity")
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge")
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
coord_flip()
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.9, size = 4.5) +
theme_clean()
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "steelblue2") +
annotate("text", label = "Average\n Accuracy (0.8)", x = 3.5, y = 0.9, size = 4.5) +
theme_clean()
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "indianred") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "steelblue2") +
theme_clean()
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "red") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "blue") +
theme_clean()
mean(pred_df$correct_perc)
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "red") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "blue") +
annotate("text", label = "Avg (0.8)", x = 6, y = 0.85, size = 3, ) +
theme_clean()
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "red") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "blue") +
annotate("text", label = "Avg\n (0.8)", x = 6, y = 0.85, size = 4, ) +
theme_clean()
mean(pred_df_in_samp$correct_perc)
pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "red") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "blue") +
annotate("text", label = "Avg\n (0.8)", x = 6, y = 0.85, size = 4) +
annotate("text", label = "Avg\n (0.9)", x = 6, y = 0.95, size = 4) +
theme_clean()
outsamp_graph <- pred_df_both %>%
ggplot(aes(x = as.factor(year), y = correct_perc, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "States Predicted Correctly (%)", x = "", title = "Out of Sample Classification Accuracy") +
scale_fill_manual(values = c("steelblue2", "indianred"), name = "Forecast Type") +
coord_flip() +
geom_hline(yintercept = mean(pred_df$correct_perc), lty = 2, lwd = 1.3, color = "red") +
geom_hline(yintercept = mean(pred_df_in_samp$correct_perc), lty = 2, lwd = 1.3, color = "blue") +
annotate("text", label = "Avg\n (0.8)", x = 6, y = 0.85, size = 4) +
annotate("text", label = "Avg\n (0.9)", x = 6, y = 0.95, size = 4) +
theme_clean()
ggsave(path = "images", filename = "final_samp_graph.png", height = 6, width = 10)
library(stargazer)
stargazer(glm_mod,
title = "Election Model",
out = "../OwenBernstein.github.io/images/final_model_glm.html")
tibstate_wins
predict_ec
predict_ec %>%
filter(winner == "republican") %>%
summary()
?quantile
predict_ec %>%
filter(winner == "republican") %>%
quantile(probs = 0.025, 0.0975)
predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs = 0.025, 0.0975)
predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs =seq(0.025, 0.0975))
predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs = seq(0.025, 0.0975))
predict_ec %>%
filter(winner == "republican") %>%
pull(votes)
predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs = seq(0.025, 0.975))
predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs = c(0.025, 0.975))
trump_interval <- predict_ec %>%
filter(winner == "republican") %>%
pull(votes) %>%
quantile(probs = c(0.025, 0.975))
trump_interval
point_prediction
tibstate_wins
states_point_prediction <- tibstate_wins %>%
group_by(state) %>%
summarize(rep_vs = mean(prob)) %>%
mutate(winner = ifelse(rep_vs > 0.5, "Trump", "Biden"))
states_point_prediction
states_point_prediction$state <- state.name[match(states_point_prediction2$state, state.abb)]
states_point_prediction$state <- state.name[match(states_point_prediction$state, state.abb)]
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Prediction Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2
states_point_prediction <- tibstate_wins %>%
group_by(state) %>%
summarize(rep_vs = mean(prob)) %>%
mutate(winner = ifelse(rep_vs > 0.5, "Trump", "Biden")) %>%
add_row(state = "District of Columbia", rep_vs = 7, winner = "Biden")
states_point_prediction$state <- state.name[match(states_point_prediction$state, state.abb)]
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Prediction Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2
states_point_prediction
View(states_point_prediction)
states_point_prediction$state[51] <- "District of Columbia"
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Prediction Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Prediction Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
ggsave(path = "images", filename = "final_prediction_map.png", height = 6, width = 10)
states_point_prediction
View(states_point_prediction)
