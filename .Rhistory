age3045_change,
age4565_change,
age65_change
) %>%
mutate(incumbent = ifelse(
year == 1976 & party == "republican",
1,
ifelse(
year == 1980 & party == "democrat",
1,
ifelse(
year == 1984 & party == "republican",
1,
ifelse(
year == 1988 & party == "republican",
1,
ifelse(
year == 1992 & party == "republican",
1,
ifelse(
year == 1996 & party == "democrat",
1,
ifelse(
year == 2000 & party == "democrat",
1,
ifelse(
year == 2004 & party == "republican",
1,
ifelse(
year == 2008 & party == "republican",
1,
ifelse(
year == 2012 & party == "democrat",
1,
ifelse(
year == 2016 & party == "democrat",
1,
ifelse(year == 2020 &
party == "republican", 1, 0)
)
)
)
)
)
)
)
)
)
)
)) %>%
filter(incumbent == 1) %>%
mutate(inc_vote = R)
mod_dat <- bind_rows(change_data, change_data_2) %>%
arrange(state) %>%
mutate(voters = D + R)
glm_mod <- glm(cbind(inc_vote, voters-inc_vote) ~ avg_poll + avg_approve + asian_change + black_change + hispanic_change + female_change + party +
age3045_change + age4565_change + age65_change, mod_dat,
family = binomial)
stargazer(glm_mod,
title = "Election Model",
out = "../OwenBernstein.github.io/images/final_model_glm.html")
demog_2020 <- subset(demog, year == 2018)
demog_2020 <- as.data.frame(demog_2020)
rownames(demog_2020) <- demog_2020$state
demog_2020 <- demog_2020[state.abb, ]
demog_2020_change <- demog %>%
filter(year %in% c(2016, 2018)) %>%
group_by(state) %>%
mutate(
asian_change = Asian - lag(Asian, order_by = year),
black_change = Black - lag(Black, order_by = year),
hispanic_change = Hispanic - lag(Hispanic, order_by = year),
indigenous_change = Indigenous - lag(Indigenous, order_by = year),
white_change = White - lag(White, order_by = year),
female_change = Female - lag(Female, order_by = year),
male_change = Male - lag(Male, order_by = year),
age20_change = age20 - lag(age20, order_by = year),
age3045_change = age3045 - lag(age3045, order_by = year),
age4565_change = age4565 - lag(age4565, order_by = year),
age65_change = age65 - lag(age65, order_by = year)
) %>%
filter(year == 2018) %>%
mutate(year = 2020)
predict_polls <- polls_2020 %>%
select(poll_id, state, answer, end_date, pct) %>%
mutate(end_date = mdy(polls_2020$end_date)) %>%
filter(end_date > ymd("2020-10-01") & end_date < ymd("2020-11-1")) %>%
filter(answer == "Biden" | answer == "Trump") %>%
group_by(state, answer) %>%
summarise(avg_poll = mean(pct)) %>%
filter(!(state %in% c(""))) %>%
filter(answer == "Trump")
predict_polls$state <- state.abb[match(predict_polls$state, state.name)]
approve_predict <- approval_2020 %>%
mutate(month = as.numeric(substr(mdy(end_date), 6, 7))) %>%
filter(politician_id == 11) %>%
filter(month == 10) %>%
mutate(year = 2020) %>%
mutate(avg_approve = mean(yes)) %>%
select(year, avg_approve) %>%
unique()
newdata <- predict_polls %>%
full_join(demog_2020_change, by = "state") %>%
left_join(approve_predict,
by = "year") %>%
mutate(party = "republican") %>%
drop_na(state) %>%
filter(state != "DC")
polls_sd <- polls_2020 %>%
select(poll_id, state, answer, end_date, pct) %>%
mutate(end_date = mdy(polls_2020$end_date)) %>%
filter(end_date > ymd("2020-10-01") & end_date < ymd("2020-11-1")) %>%
filter(answer == "Trump") %>%
group_by(state) %>%
summarise(sd = sd(pct))
polls_sd$state <- state.abb[match(polls_sd$state, state.name)]
output <- tibble()
tib <- tibble()
n <- 10000
for(s in unique(newdata$state)) {
state_dat <- newdata %>%
filter(state == s)
state_dat_2 <- mod_dat %>%
filter(state == s) %>%
filter(year == 2016)
state_dat_3 <- polls_sd %>%
filter(state == s) %>%
pull(sd)
prob_vote <- predict(glm_mod, newdata = state_dat, type="response")[[1]]
sim_inc_votes <- rbinom(n = n, size = state_dat_2$voters, prob = rnorm(n = n, mean = prob_vote, sd = (state_dat_3/100)))
inc_vs <- sim_inc_votes/state_dat_2$voters
for(i in 1:n){
vec <- tibble(state = s, prob = inc_vs[i])
tib <- tib %>%
bind_rows(vec)
}
vector <- tibble(state = s, sims = list(inc_vs))
output <- output %>%
bind_rows(vector)
}
tibstate_wins <- tib %>%
mutate(mod = rep(1:n, times = 50)) %>%
group_by(state) %>%
mutate(winner = ifelse(prob > 0.5, "republican", "democrat"))
predict_ec <- tibstate_wins %>%
left_join(ec, by = c("state" = "State")) %>%
select(state, prob, mod, winner, `2016`) %>%
group_by(mod, winner) %>%
summarise(votes = sum(`2016`)) %>%
mutate(votes = ifelse(winner == "democrat", votes + 3, votes))
college_votes <- predict_ec %>%
ggplot(aes(x = votes, fill = winner)) +
geom_histogram(position = "identity", alpha = c(0.6), bins = 38) +
scale_fill_manual(values=c("steelblue2", "indianred"), name = "", labels = c("Democrat", "Republican")) +
labs(title = "10,000 Electoral College Simulations", x = "Electoral Votes", y = "Simulations") +
theme_clean() +
geom_vline(xintercept = 270, lty = 2, lwd = 1.3)
biden_win_perc <- predict_ec %>%
group_by(winner) %>%
filter(winner == "democrat") %>%
mutate(dem_win = ifelse(votes > 270, 1, 0)) %>%
summarise(mean(dem_win))
point_prediction <- tibstate_wins %>%
left_join(ec, by = c("state" = "State")) %>%
group_by(state, `2016`) %>%
summarize(rep_vs = mean(prob)) %>%
mutate(winner = ifelse(rep_vs > 0.5, "republican", "democrat")) %>%
group_by(winner) %>%
summarize(votes = sum(`2016`)) %>%
mutate(votes = ifelse(winner == "democrat", votes + 3, votes))
states_point_prediction <- tibstate_wins %>%
group_by(state) %>%
summarize(rep_vs = mean(prob)) %>%
mutate(winner = ifelse(rep_vs > 0.5, "Trump", "Biden")) %>%
add_row(state = "District of Columbia", rep_vs = 7, winner = "Biden")
save(states_point_prediction, file = "data/states_point_prediction.Rdata")
states_point_prediction
load("data/sentiment_channels.Rdata")
load("data/sentiment_channels.Rdata")
load("data/states_point_prediction.Rdata")
states_point_prediction
real_dat <- read_csv("data/popvote_1948-2020.csv") %>%
filter(year == 2020)
real_dat_state <- read_csv("data/popvote_bystate_1948-2020.csv") %>%
filter(year == 2020)
real_dat_state$state <- state.abb[match(real_dat_state$state, state.name)]
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6)
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
ungroup() %>%
summarize(rmse = mean(sqrt(error^2)) * 100)
rmse <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
ungroup() %>%
summarize(rmse = mean(sqrt(error^2)) * 100)
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(stargazer)
library(ggthemes)
library(patchwork)
library(broom)
library(janitor)
library(statebins)
library(ggrepel)
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6)
accuracy_graph
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
xlim(0.3, 0.8) +
ylim(0.3, 0.8)
accuracy_graph
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
xlim(0.3, 0.75) +
ylim(0.3, 0.75)
accuracy_graph
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(title = "Predicted vs. Actual Vote Share", x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
xlim(0.3, 0.75) +
ylim(0.3, 0.75)
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(title = "Predicted vs. Actual Vote Share", x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
xlim(0.3, 0.75) +
ylim(0.3, 0.75)
accuracy_graph
library(gt)
mse <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
ungroup() %>%
summarize(rmse = mean(error) * 100)
mse
data.frame(elect_error = 265 - 232, rmse_ = rmse, mse_ = mse, class = 48/51, states = "AZ, GA, NV")
data.frame(elect_error = 265 - 232, rmse_ = rmse, mse_ = mse, class = 48/51, states = "AZ, GA, NV")
mse
rmse
eval <- data.frame(elect_error = 265 - 232, rmse_ = rmse, mse_ = mse, class = 48/51, states = "AZ, GA, NV")
eval
gt(eval)
data.frame(measure = c(33, rmse, mse))
data.frame(measure = c(33, rmse, mse), model = "mine")
install.packages("formattable")
library(formattable)
formattable(eval)
measures <- c("National Electoral Vote Total", "RMSE", "MSE", "Classification Accuracy", "States Missed")
measures
values <- c("33", "1.68", "-0.43", "94", "AZ, GA, NV")
values
data.frame(measures = measures, values = values)
eval <- data.frame(measures = measures, values = values)
formattable(eval)
gt(eval)
formattable(eval)
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual")
library(formattable)
formattable(eval, align = c("l", "r"))
formattable(eval, align = c("l", "c"))
eval <- data.frame(Measures = measures, values = Values)
measures <- c("National Electoral Vote Total", "RMSE", "MSE", "Classification Accuracy", "States Missed")
values <- c("33", "1.68", "-0.43", "94", "AZ, GA, NV")
eval <- data.frame(Measures = measures, Values = values)
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual")
eval <- data.frame(Measure = measures, Value = values)
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual")
eval <- data.frame(Measure = measures, My Model = my_model)
eval <- data.frame(Measure = measures, my_model = my_model, five_thirty_eight = five_thirty_eight, economist = economist)
my_model <- c("33", "1.68", "-0.43", "94", "AZ, GA, NV")
five_thirty_eight <- c("-42", "3.02", "-2.44", "96", "NC, FL")
economist <- c("-50", "2.80", "-2.33", "96", "NC, FL")
eval <- data.frame(Measure = measures, my_model = my_model, five_thirty_eight = five_thirty_eight, economist = economist)
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual")
measures <- c("National Electoral Vote Total", "RMSE (state, pv2p)", "MSE (state, pv2p", "Classification Accuracy", "States Missed")
my_model <- c("33", "1.68", "-0.43", "94", "AZ, GA, NV")
five_thirty_eight <- c("-42", "3.02", "-2.44", "96", "NC, FL")
economist <- c("-50", "2.80", "-2.33", "96", "NC, FL")
eval <- data.frame(Measure = measures, my_model = my_model, five_thirty_eight = five_thirty_eight, economist = economist)
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual")
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual") %>%
cols_label(measure = "", my_model = "My Model", five_thirty_eight = "FiveThirtyEight", economist = "The Economist")
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual") %>%
cols_label(Measure = "", my_model = "My Model", five_thirty_eight = "FiveThirtyEight", economist = "The Economist")
formattable(eval)
formattable(eval, my_model = "My Model")
gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual") %>%
cols_label(Measure = "", my_model = "My Model", five_thirty_eight = "FiveThirtyEight", economist = "The Economist")
eval_measures <- gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual") %>%
cols_label(Measure = "", my_model = "My Model", five_thirty_eight = "FiveThirtyEight", economist = "The Economist")
gtsave(data = eval_measures, path = "images", filename = "eval_measures_gt.png")
accuracy_graph <- states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
ggplot(aes(rep_vs, R_pv2p)) +
geom_point() +
geom_text_repel(aes(label = state)) +
labs(title = "Predicted vs. Actual Vote Share", x = "Predicted Trump 2 Party VS", y = "Actual Trump 2 Party VS") +
theme_clean() +
geom_abline(slope = 1) +
geom_vline(xintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
geom_hline(yintercept = 0.5, col = "steelblue2", lty = 2, lwd = 0.6) +
xlim(0.3, 0.75) +
ylim(0.3, 0.75)
ggsave(path = "images", filename = "accuracy_graph.png", height = 6, width = 10)
states_point_prediction$state <- state.name[match(states_point_prediction$state, state.abb)]
states_point_prediction$state[51] <- "District of Columbia"
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "2020 Presidential Election Prediction Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2
statebin_map_2
states_point_prediction
real_state_points <- states_point_prediction
View(states_point_prediction)
real_state_points$winner[4] <- "Biden"
real_state_points
real_state_points$winner[33] <- "Biden"
real_state_points$winner[27] <- "Biden"
statebin_map_2 <- states_point_prediction %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = "Predicted 2020 Presidential Election Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2_real <- real_state_points %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = " Actual 2020 Presidential Election Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2_real
real_state_points <- states_point_prediction
real_state_points$winner[4] <- "Biden"
real_state_points$winner[33] <- "Biden"
real_state_points$winner[10] <- "Biden"
statebin_map_2_real <- real_state_points %>%
ggplot(aes(state = state, fill = fct_relevel(winner, "Biden", "Trump"))) +
geom_statebins() +
theme_statebins() +
labs(title = " Actual 2020 Presidential Election Map",
fill = "") +
scale_fill_manual(values=c("steelblue2", "indianred"), breaks = c("Biden", "Trump"))
statebin_map_2_real
prediction_map_comp <- statebin_map_2 + statebin_map_2_real
prediction_map_comp
prediction_map_comp <- statebin_map_2 + statebin_map_2_real
ggsave(path = "images", filename = "prediction_map_comp.png", height = 6, width = 10)
measures <- c("National Electoral Vote Total", "RMSE (state, pv2p)", "MSE (state, pv2p)", "Classification Accuracy", "States Missed")
my_model <- c("33", "1.68", "-0.43", "94", "AZ, GA, NV")
five_thirty_eight <- c("-42", "3.02", "-2.44", "96", "NC, FL")
economist <- c("-50", "2.80", "-2.33", "96", "NC, FL")
eval <- data.frame(Measure = measures, my_model = my_model, five_thirty_eight = five_thirty_eight, economist = economist)
eval_measures <- gt(eval) %>%
tab_header(title = "Trump Predicted - Trump Actual") %>%
cols_label(Measure = "", my_model = "My Model", five_thirty_eight = "FiveThirtyEight", economist = "The Economist")
gtsave(data = eval_measures, path = "images", filename = "eval_measures_gt.png")
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia")
states_point_prediction <- tibstate_wins %>%
group_by(state) %>%
summarize(rep_vs = mean(prob)) %>%
mutate(winner = ifelse(rep_vs > 0.5, "Trump", "Biden")) %>%
add_row(state = "District of Columbia", rep_vs = 7, winner = "Biden")
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia")
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p)
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
arrange(desc())
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
arrange(desc(error))
states_point_prediction %>%
full_join(real_dat_state, by = "state") %>%
filter(state != "District of Columbia") %>%
group_by(state) %>%
summarize(error = rep_vs - R_pv2p) %>%
arrange(error)
newdata
newdata %>%
select(state, avg_poll, asian_change, black_change, hispanic_change,
indigenous_change, female_change, age4565_change, age3045_change,
age65_change, avg_approve, party) %>%
filter(state == "CA" | state == "NJ")
newdata %>%
select(state, avg_poll, asian_change, black_change, hispanic_change,
female_change, age4565_change, age3045_change,
age65_change, avg_approve, party) %>%
filter(state == "CA" | state == "NJ")
newdata %>%
select(state, avg_poll, avg_approve, asian_change, black_change, hispanic_change,
female_change, age4565_change, age3045_change,
age65_change, party) %>%
filter(state == "CA" | state == "NJ")
dat <- newdata %>%
select(state, avg_poll, avg_approve, asian_change, black_change, hispanic_change,
female_change, age4565_change, age3045_change,
age65_change, party) %>%
filter(state == "CA" | state == "NJ")
dat
View(dat)
dat <- newdata %>%
select(state, avg_poll, avg_approve, asian_change, black_change, hispanic_change,
female_change, age4565_change, age3045_change,
age65_change, party) %>%
filter(state == "NM" | state == "NJ")
dat <- newdata %>%
select(state, avg_poll, avg_approve, asian_change, black_change, hispanic_change,
female_change, age4565_change, age3045_change,
age65_change, party) %>%
filter(state == "NM" | state == "NJ" | state == "CO")
